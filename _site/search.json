[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nThis website is a collection of my coursework for the Visual Analytics courses taken during my MITB Journey.\nThere are 3 type of exercises:\n\nHands-on Exercise\nIn-Class Exercise\nTake-Home Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-simple-chart",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-simple-chart",
    "title": "Hands-on Exercise 1",
    "section": "Plotting a simple chart",
    "text": "Plotting a simple chart\n\nUsing geombar() to plot a bar chart\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nUsing geom_dotplot() to plot a dot plot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)\n\n\n\n\n\n\nUsing geom_histogram() to create a histogram\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram() \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on Exercise 1",
    "section": "Working with Theme",
    "text": "Working with Theme\n\nChanging theme of bar chart\n\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"lightblue\", colour = \"lightblue\", \n                                    size = 0.5, linetype = \"solid\"),\n    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = \"white\"), \n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"white\"))\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#designing-data-driven-graphics-for-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#designing-data-driven-graphics-for-analysis",
    "title": "Hands-on Exercise 1",
    "section": "Designing Data-driven Graphics for Analysis",
    "text": "Designing Data-driven Graphics for Analysis\n\nExercise 1\n\nggplot(data=exam_data, \n       aes(x=reorder(RACE,RACE,\n                     function(x)-length(x)))) +\n  geom_bar() +\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100, 1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\n\n\nExercise 2 : Adding mean and median lines\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=1) +\n  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             size=1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\nExercise 3: Distribution of English scores for all pupils\n\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nExercise 4\n\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Creating Elegant Graphics with ggplot2",
    "section": "",
    "text": "The code chunck below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2: Creating Elegant Graphics with ggplot2",
    "section": "2.1 Working with ggrepel",
    "text": "2.1 Working with ggrepel\nggrepel helps to repel overlapping text\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nSimply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-themes",
    "title": "Hands-on Exercise 2: Creating Elegant Graphics with ggplot2",
    "section": "2.2 Working with Themes",
    "text": "2.2 Working with Themes\n8 Built-in Themes: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void()\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\nUsing ggtheme package\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\nUsing hrbthems package\nProvides a base theme that focuses on typographic elements, including where various labels are placed and fonts used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_ipsum(axis_title_size = 18,       #increase font size of axis title to 18 \n              base_size = 15,             #increase default axis label to 15\n              grid = \"Y\") +               # keep only y-axis grid lines\n  ggtitle(\"Distribution of Maths scores\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2: Creating Elegant Graphics with ggplot2",
    "section": "2.3 Beyond Single Graph",
    "text": "2.3 Beyond Single Graph\nCreate composite plot by combining multiple graphs First, create the three statistical graphics below\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\nWorking with patchwork\nCreating patchwork Use ‘+’ to create two columns layout Use ‘/’ to create two row layout (stack) Use ‘()’ to create subplot group Use ‘|’ to place the plots beside each other\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')   #creating a composite figure with tag\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCombining patchwork and themes\n\n((p1 / p2) | p3) & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nInsert another plot in a plot with inset_element()\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nggiraph, for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\nDT, provides an R interface to the JavaScript library DataTablesthat create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork, for combining multiple plots into one figure.\ngifski , converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder, an excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-ggiraph-for-interactive-data-visualisation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-ggiraph-for-interactive-data-visualisation",
    "title": "Hands-on Exercise 3",
    "section": "2.1 Using ggiraph for interactive data visualisation",
    "text": "2.1 Using ggiraph for interactive data visualisation\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive. The interactivity is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nData_id: a column of data-sets that contain an id to be associated with elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\n\nIf it is used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n2.1.1 Using tooltip (tooltip effect)\nThere are two parts of the codes: 1. creating ggplot object, 2. girafe() of ggiraph will be used to create an interactive svg object.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  #geom_dotplot_interactive still takes argument of original geom_dotplot but with tooltip enabled in aes()\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n2.1.2 Displaying multiple information on tooltip\n\n# Create a new field called tooltip\nexam_data$tooltip <- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n2.1.3 Customising Tooltip style\nUsing opts_tooltip() of ggiraph to customize tooltip rendering by adding css declarations.\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:blue;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBackground colour of the tooltip is now white and the font colour is blue and bold\n\n\n\n\n2.1.4 Displaying statistics on tooltip"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(rstatix,gt,patchwork,tidyverse,ggstatsplot)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample=ENGLISH))+\n  stat_qq() +\n  stat_qq_line()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that the points deviate significantly from the straight diagonal line. This is a clear indication that the set of data is not normally distributed.\n\n\n\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample=ENGLISH))+\n  stat_qq() +\n  stat_qq_line()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Application Learning Journey",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications.\nIn this website, you will find my coursework prepared for this course.\nHope you enjoy reading them!\nMost Recent Submissions…\n\n\n\n\n\n\n\n\n\n\n\nIn-Class Exercise 4\n\n\n\n\n\n\nDabbie Neo\n\n\nMay 6, 2023\n\n\n\n\n\n\n\n\n\n\n\nTake-Home_Ex01\n\n\n\n\n\n\nDabbie Neo\n\n\nMay 5, 2023\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 2: Creating Elegant Graphics with ggplot2\n\n\n\n\n\n\nDabbie Neo\n\n\nApr 29, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home_Ex01",
    "section": "",
    "text": "This exercise aims to reveal the demographic, financial characteristics and hidden patterns of the City of Engagement, using static and interactive statistical graphics methods. The data will be processed using appropriate tidyverse packages and visualization will be designed using ggplot2 and its extensions."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#install-and-launching-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#install-and-launching-r-packages",
    "title": "Take-Home_Ex01",
    "section": "2.1 Install and launching R packages",
    "text": "2.1 Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nplotly: R library for plotting interactive statistical graphs.\nggstatsplot: Used for creating graphics with details from statistical tests.\ngganimate\ngifski\nknitr: Used for dynamic report generation\npatchwork: Used to combine plots\nggdist: Used for visualisation distribution and uncertainty\nggthemes: Provide additional themes for ggplot2\ntidyverse: a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\nzoo\n\n\npacman::p_load(plotly, ggstatsplot, knitr, patchwork, ggdist, ggthemes, tidyverse)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-the-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-the-data",
    "title": "Take-Home_Ex01",
    "section": "2.2 Importing the Data",
    "text": "2.2 Importing the Data\n\nparticipants <- read_csv(\"data/Participants.csv\",show_col_types = FALSE)\nfinancial <- read_csv(\"data/FinancialJournal.csv\",show_col_types = FALSE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling",
    "title": "Take-Home_Ex01",
    "section": "2.3 Data Wrangling",
    "text": "2.3 Data Wrangling\nLooking at the data below, there are a few data issues\n\nhead(participants)\n\n# A tibble: 6 × 7\n  participantId householdSize haveKids   age educationLevel      interestGroup\n          <dbl>         <dbl> <lgl>    <dbl> <chr>               <chr>        \n1             0             3 TRUE        36 HighSchoolOrCollege H            \n2             1             3 TRUE        25 HighSchoolOrCollege B            \n3             2             3 TRUE        35 HighSchoolOrCollege A            \n4             3             3 TRUE        21 HighSchoolOrCollege I            \n5             4             3 TRUE        43 Bachelors           H            \n6             5             3 TRUE        32 HighSchoolOrCollege D            \n# ℹ 1 more variable: joviality <dbl>\n\n\n\nhead(financial)\n\n# A tibble: 6 × 4\n  participantId timestamp           category  amount\n          <dbl> <dttm>              <chr>      <dbl>\n1             0 2022-03-01 00:00:00 Wage      2473. \n2             0 2022-03-01 00:00:00 Shelter   -555. \n3             0 2022-03-01 00:00:00 Education  -38.0\n4             1 2022-03-01 00:00:00 Wage      2047. \n5             1 2022-03-01 00:00:00 Shelter   -555. \n6             1 2022-03-01 00:00:00 Education  -38.0\n\n\nISSUE 1: Inaccurate data/modelling format\nparticipantId is in <dbl> format. It needs to be converted to <chr>\n\nparticipants$participantId <- as.character(participants$participantId)\nstr(participants)\n\nspc_tbl_ [1,011 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId : chr [1:1011] \"0\" \"1\" \"2\" \"3\" ...\n $ householdSize : num [1:1011] 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: chr [1:1011] \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   householdSize = col_double(),\n  ..   haveKids = col_logical(),\n  ..   age = col_double(),\n  ..   educationLevel = col_character(),\n  ..   interestGroup = col_character(),\n  ..   joviality = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\nfinancial$participantId <- as.character(financial$participantId)\nstr(financial)\n\nspc_tbl_ [1,513,636 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId: chr [1:1513636] \"0\" \"0\" \"0\" \"1\" ...\n $ timestamp    : POSIXct[1:1513636], format: \"2022-03-01\" \"2022-03-01\" ...\n $ category     : chr [1:1513636] \"Wage\" \"Shelter\" \"Education\" \"Wage\" ...\n $ amount       : num [1:1513636] 2473 -555 -38 2047 -555 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   timestamp = col_datetime(format = \"\"),\n  ..   category = col_character(),\n  ..   amount = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nISSUE 2: Change timestamp to usable data\nSplit the timestamp data into date and time. It also needs to be reformatted to ….\n\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nfinancial$month_year <- format(financial$timestamp, \"%m/%Y\")\nfinancial$month_year <- as.yearmon(financial$month_year, \"%m/%Y\")\n\n#drop the timestamp col\n#financial <- financial %>% select(-timestamp)\n#date_summary <- unique(financial$month_year)\n#print(date_summary)\nhead(financial)\n\n# A tibble: 6 × 5\n  participantId timestamp           category  amount month_year\n  <chr>         <dttm>              <chr>      <dbl> <yearmon> \n1 0             2022-03-01 00:00:00 Wage      2473.  Mar 2022  \n2 0             2022-03-01 00:00:00 Shelter   -555.  Mar 2022  \n3 0             2022-03-01 00:00:00 Education  -38.0 Mar 2022  \n4 1             2022-03-01 00:00:00 Wage      2047.  Mar 2022  \n5 1             2022-03-01 00:00:00 Shelter   -555.  Mar 2022  \n6 1             2022-03-01 00:00:00 Education  -38.0 Mar 2022  \n\n\nISSUE 3: Rent adjustment has the same nature as shelter\nRecode RentAdjustment as Shelter\n\nfinancial$category <- ifelse(financial$category == \"RentAdjustment\", \"Shelter\", financial$category)\n\n# Check all RentAjustment has been recoded to Shelter\ncategory_summary <- unique(financial$category)\nprint(category_summary)\n\n[1] \"Wage\"       \"Shelter\"    \"Education\"  \"Food\"       \"Recreation\"\n\n\nISSUE 4: Duplicates found in data\n\n#Check for duplicates in financial table\nprint(sum(duplicated(financial)))\n\n[1] 1113\n\n#Check for duplicates in participants table\nprint(sum(duplicated(participants)))\n\n[1] 0\n\n#Remove duplicates in financial table\nfinancial_unique <- distinct(financial)\nnrow(financial_unique)\n\n[1] 1512523\n\n\nISSUE 5: Data is segregated by individual entries\nGroup the entries by participants taking into consideration time and category and summing up the amount.\n\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Group by participant_id and month_year, subgroup by category, then summarize by amount\nnew_financial <- financial_unique %>%\n  group_by(participantId, month_year, category) %>%\n  summarise(total_amount = sum(amount)) %>%\n  mutate(total_amount = round(total_amount, 2))\n\n`summarise()` has grouped output by 'participantId', 'month_year'. You can\noverride using the `.groups` argument.\n\nhead(new_financial)\n\n# A tibble: 6 × 4\n# Groups:   participantId, month_year [2]\n  participantId month_year category   total_amount\n  <chr>         <yearmon>  <chr>             <dbl>\n1 0             Mar 2022   Education         -38.0\n2 0             Mar 2022   Food             -268. \n3 0             Mar 2022   Recreation       -349. \n4 0             Mar 2022   Shelter          -555. \n5 0             Mar 2022   Wage            11932. \n6 0             Apr 2022   Education         -38.0\n\n\nISSUE 6: Data does not show Net Financial Health and cost of living\nFinancial Health = Sum (Wage + Education + Shelter + Recreation + Food)\n\nlibrary(dplyr)\nlibrary(tidyr)\n\nfinancial_unique %>%\n  group_by(participantId, month_year, category) %>%\n  summarize(total_amount = sum(amount)) %>%\n  pivot_wider(names_from = category, values_from = total_amount)\n\n`summarise()` has grouped output by 'participantId', 'month_year'. You can\noverride using the `.groups` argument.\n\n\n# A tibble: 10,691 × 7\n# Groups:   participantId, month_year [10,691]\n   participantId month_year Education  Food Recreation Shelter   Wage\n   <chr>         <yearmon>      <dbl> <dbl>      <dbl>   <dbl>  <dbl>\n 1 0             Mar 2022       -38.0 -268.     -349.    -555. 11932.\n 2 0             Apr 2022       -38.0 -266.     -219.    -555.  8637.\n 3 0             May 2022       -38.0 -265.     -383.    -555.  9048.\n 4 0             Jun 2022       -38.0 -257.     -466.    -555.  9048.\n 5 0             Jul 2022       -38.0 -270.    -1070.    -555.  8637.\n 6 0             Aug 2022       -38.0 -262.     -314.    -555.  9459.\n 7 0             Sep 2022       -38.0 -256.     -295.    -555.  9048.\n 8 0             Oct 2022       -38.0 -267.      -25.0   -555.  8637.\n 9 0             Nov 2022       -38.0 -261.     -377.    -555.  9048.\n10 0             Dec 2022       -38.0 -266.     -357.    -555.  9048.\n# ℹ 10,681 more rows\n\n\nTotal Expenses = Sum(Education + Shelter + Recreation + Food)\nISSUE 7: Age data is disaggregated\nBin age data by groups of 10.\nISSUE 8: Participants data and Financial data are separated\nCombine the two tables together by participantId"
  }
]