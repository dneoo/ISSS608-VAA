---
title: "In Class Ex 5: Network Data Visualisation and Analysis"
author: "Dabbie Neo"
date: 5/13/2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false 
---

# 1. Getting Started 

## Install and launching R packages 

```{r}
pacman::p_load(igraph, tidygraph, ggraph,visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

## Importing the Data

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

## Reviewing the imported data

```{r}
glimpse(GAStech_edges)
```
## Wrangling Time 

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
glimpse(GAStech_edges)
```
## Wrangling attributes. 

GAStech_edges data.frame consists of individual email flow records, which is not useful for visualisation. 

Thus, we will aggregate the individual by date,senders, receivers, main subject and day of the week.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
  summarise(Weight = n()) %>%
  filter(source!=target) %>%    #only want those that you sent to others, dont want those u cc yourself
  filter(Weight > 1) %>%         #only want those you sent out more than 1
  ungroup()

GAStech_edges_aggregated
```

# 2. Creating network objects using `tidygraph`

## Using `tbl_graph()` to build tidygraph data model

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
GAStech_graph
```
# 3. Plotting Static Network Graphs with `ggraph` package

## 3.1 Plotting a basic network graph 

```{r}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

### 3.1.2 Changing the default network graph theme

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```
### 3.1.3 Changing the color of the plot

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```
### 3.1.4 Modifying network nodes

In this section, you will color each node by referring to their respective departments.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

### 3.1.5 Modifying edges

Here, the code chunck below shows how the thickness of the edges will be mapped with the Weight variable. (Thin line means not much interaction with one another)

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

### 3.1.6 Creating facet graphs

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

As shown above, we can see that weekdays there are interactions, but Saturday there are no links, meaning not much interaction with others. 

## 3.2 Network Metrics Analysis

### 3.2.1 Computing centrality indices 

```{r}
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```
### 3.2.2 Visualising Community

```{r}
g <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

## 3.3 Building Interactive Network Graph with `visNetwork`

Before we plot the interactive network graph, we need to prepare the data model using the code chunk below. 

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

Plotting the first interactive network graph

```{r}
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

### 3.3.1 Working with visual attributes - Nodes

Rename Department field to group
```{r}
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

When we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```